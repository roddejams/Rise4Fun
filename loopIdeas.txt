     
     
     assert(i <= x);
     assert(i >= 0);
     havoc i;
     assume(i <= x);
     assume(i >= 0);
     if(i < x) {
        assert(i >= 0);
         i = i + 1;
          assert(i <= x);
           assert(i >= 0);
            assume(false);
     }




assert inv -> x1

// havoc assume for arbitrary loop iteration
// need to know modset at this point
x -> x2
assume x2 ~ inv

// visit loop cond after havoc assume
if (loopCond for x2)
  open scope

  // loop body must be saved already as we need modset earlier?? but stick loop cond for havoced x ??

  assert loop cond for x2
  do things with x2 -> xN
  
  assert inv for xN
  assume false
  close scope / pop predicate

do the modset for the loop ie declare 
  xN+1 = loopcond for x2 ? xN : x1
